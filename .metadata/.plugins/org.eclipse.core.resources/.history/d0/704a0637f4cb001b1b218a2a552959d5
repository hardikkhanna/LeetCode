/**
 * 
 */
package leetcode.weeklycontest.problems;

import java.util.HashMap;
import java.util.LinkedHashMap;

import leetcode.array.problems.ScannerInput;

/**
 * @author NIPC-57
 *
 *         Date : 13-Jun-2021 Time : 8:34:08 am
 */
public class WeekylyContest244 extends ScannerInput {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int[] removables = get1DArray();
		String s = sc.next();
		String p = sc.next();
		int ans = maximumRemovables(s, p, removables);
		System.out.println(ans);

	}

	/**
	 * @param s
	 * @param p
	 * @param removables
	 * @return
	 */
	private static int maximumRemovables(String s, String p, int[] removable) {
		HashMap<Character, Integer> map = new LinkedHashMap<>();
		for (char c : s.toCharArray()) {
			if (map.containsKey(c)) {
				map.put(c, map.get(c) + 1);
			} else {
				map.put(c, 1);
			}
		}
		int ans = 0;
		for (int i : removable) {
			if (map.get(s.charAt(i)) == 1)
				map.remove(s.charAt(i));
			else
				map.put(s.charAt(i), map.get(s.charAt(i)) - 1);
			// System.out.print(s.charAt(i));
			s = s.substring(0, i) + s.substring(i + 1);
			if (isSubsequence(s, p, map)) {
				ans++;
			} else {
				break;
			}
		}
		return ans;
	}

	private boolean isSubsequence(String s, String p, HashMap<Character, Integer> map) {
		String keys = "";
		for (char c : map.keySet()) {
			keys += c;
		}
		System.out.print(keys);
		return keys.contains(p);
	}

}
