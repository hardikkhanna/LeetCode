/**
 * 
 */
package leetcode.binarytrees.problems;

import java.util.Scanner;

/**
 * @author Hardik
 *
 *         Date : Jan 12, 2021 Time : 11:46:12 AM
 */
public class BinaryTreeUse {

	public static void printData(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}
		String toBePrinted = root.data + " ";
		if (root.left != null) {
			toBePrinted += "L: " + root.left.data + ", ";
		}
		if (root.right != null)
			toBePrinted += "R: " + root.right.data;
		System.out.println(toBePrinted);
		printData(root.left);
		printData(root.right);
	}

	public static BinaryTreeNode<Integer> takeInput(Scanner sc) {
		int rootData;
		System.out.println("Enter root data : ");
		rootData = sc.nextInt();
		if (rootData == -1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		root.left = takeInput(sc);
		root.right = takeInput(sc);
		return root;

	}

	public static BinaryTreeNode<Integer> takeInputLevelWise() {
		Scanner sc = new Scanner(System.in);
		QueueUsingLL<BinaryTreeNode<Integer>> pendingNodes = new QueueUsingLL<BinaryTreeNode<Integer>>();
		System.out.println("Enter root data : ");
		int rootData = sc.nextInt();
		if (rootData == -1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		pendingNodes.enqueue(root);
		while (!pendingNodes.isEmpty()) {
			BinaryTreeNode<Integer> front;
			try {
				front = pendingNodes.dequeue();
			} catch (QueueEmptyException e) {
				return null;
			}
			System.out.println("Enter left child of " + front.data);
			int leftChild = sc.nextInt();
			if (leftChild != -1) {
				pendingNodes.enqueue(new BinaryTreeNode<Integer>(leftChild));
				front.left = new BinaryTreeNode<Integer>(leftChild);
			}
			int rightChild = sc.nextInt();
			if (rightChild != -1) {
				pendingNodes.enqueue(new BinaryTreeNode<Integer>(rightChild));
				front.right = new BinaryTreeNode<Integer>(rightChild);
			}
		}
		return root;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		// BinaryTreeNode<Integer> root = takeInput(sc);
		BinaryTreeNode<Integer> root = takeInputLevelWise();
		printData(root);
		sc.close();
	}

}
