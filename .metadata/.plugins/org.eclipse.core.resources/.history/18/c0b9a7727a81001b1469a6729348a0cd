/**
 * 
 */
package leetcode.array.problems;

/**
 * @author NIPC-43
 *
 *         Date : Mar 10, 2021 Time : 1:02:14 PM
 */
public class MaximumSumPath extends ScannerInput {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int[] input1 = get1DArray();
		int[] input2 = get1DArray();
		int path = maximumSumPath(input1, input2);
		System.out.println(path);

	}

	/**
	 * @param input1
	 * @param input2
	 * @return
	 */
	private static int maximumSumPath(int[] input1, int[] input2) {
//		int i = 0, j = 0;
//		int m = input1.length;
//		int n = input2.length;
//
//		int maxSum = 0, sum1 = 0, sum2 = 0;
//
//		while (i < m && j < n) {
//			
//			if (input1[i] < input2[j])
//				sum1 += input1[i++];
//
//			else if (input1[i] > input2[j])
//				sum2 += input2[j++];
//
//			else {
//				maxSum += Math.max(sum1, sum2);
//
//				sum1 = 0;
//				sum2 = 0;
//
//				int temp = i;
//				while (i < m && input1[i] == input2[j])
//					sum1 += input1[i++];
//
//				while (j < n && input1[temp] == input2[j])
//					sum2 += input2[j++];
//
//				maxSum += Math.max(sum1, sum2);
//
//				sum1 = 0;
//				sum2 = 0;
//			}
//		}
//
//		while (i < m)
//			sum1 += input1[i++];
//
//		while (j < n)
//			sum2 += input2[j++];
//
//		maxSum += Math.max(sum1, sum2);
//
//		return maxSum;
	
		int sum = 0;
        int sum_x = 0, sum_y = 0;
 
        int m = X.length, n = Y.length;
 
        // `i` and `j` denotes the current index of `X` and `Y`, respectively
        int i = 0, j = 0;
 
        // loop till `X` and `Y` are empty
        while (i < m && j < n)
        {
            // to handle the duplicate elements in `X`
            while (i < m-1 && X[i] == X[i+1]) {
                sum_x += X[i++];
            }
 
            // to handle the duplicate elements in `Y`
            while (j < n-1 && Y[j] == Y[j+1]) {
                sum_y += Y[j++];
            }
 
            // if the current element of `Y` is less than the current element of `X`
            if (Y[j] < X[i])
            {
                sum_y += Y[j];
                j++;
            }
 
            // if the current element of `X` is less than the current element of `Y`
            else if (X[i] < Y[j])
            {
                sum_x += X[i];
                i++;
            }
 
            else    // if (X[i] == Y[j])
            {
                // consider the maximum sum and include the current cell's value
                sum += Integer.max(sum_x, sum_y) + X[i];
 
                // move both indices by 1 position
                i++;
                j++;
 
                // reset both sums
                sum_x = 0;
                sum_y = 0;
            }
        }
 
        // process the remaining elements of `X` (if any)
        while (i < m) {
            sum_x += X[i++];
        }
 
        // process the remaining elements of `Y` (if any)
        while (j < n) {
            sum_y += Y[j++];
        }
 
        sum += Integer.max(sum_x, sum_y);
        return sum;
	}



}
