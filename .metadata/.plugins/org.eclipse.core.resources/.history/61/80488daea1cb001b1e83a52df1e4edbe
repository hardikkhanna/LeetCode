/**
 * 
 */
package leetcode.weeklycontest.problems;

import leetcode.array.problems.ScannerInput;

/**
 * @author NIPC-57
 *
 *         Date : 12-Jun-2021 Time : 9:05:25 pm
 */
public class BiWeekly5202 extends ScannerInput {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int[][] arr = {[8,6,12,20,3,11,6,9,3,19,14,9,9],[9,19,6,9,11,4,14,7,7,3,17,6,6],[3,1,2,3,18,5,13,4,9,11,18,13,15],[16,11,19,18,16,19,15,19,7,6,15,20,9],[10,16,3,7,5,16,1,13,12,15,1,19,17],[16,17,14,19,13,10,11,15,18,6,3,4,17],[18,10,18,7,8,9,16,10,19,16,9,9,6],[13,13,1,13,18,9,2,12,1,19,11,15,11],[9,17,5,20,3,3,19,18,18,20,7,17,1],[1,6,14,3,5,2,6,4,19,2,11,4,8],[8,2,16,1,18,13,7,7,10,4,16,10,19]};
		int ans = largestMagicSquare(arr);
		System.out.println(ans);
	}

	/**
	 * @param arr
	 * @return
	 */
	private static int largestMagicSquare(int[][] grid) {
		int max = 1;
		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				for (int row = i + 1, col = j + 1; row < grid.length && col < grid[0].length; row++, col++) {
					if (isMagicSquare(grid, i, j, row, col)) {
						// print(grid, i, j, row, col);
						max = Math.max(max, row - i + 1);
					}
				}

			}
		}

		return max;
	}

	/**
	 * @param grid
	 * @param i
	 * @param j
	 * @param row
	 * @param col
	 */
	private static void print(int mat[][], int startRow, int startCol, int endRow, int endColumn) {
		for (int i = startRow; i <= endRow; i++) {
			for (int j = startCol; j <= endColumn; j++) {
				System.out.print(mat[i][j] + " ");
			}
			System.out.println();
		}

	}

	static boolean isMagicSquare(int mat[][], int startRow, int startCol, int endRow, int endColumn) {
//         
		// print(mat, startRow, startCol, endRow, endColumn);
		int sumd1 = 0, sumd2 = 0;
		int col = endColumn;
		int start = startCol;
		for (int i = startRow; i <= endRow; i++) {
			// (i, i) is the diagonal from top-left -> bottom-right
			// (i, N - i - 1) is the diagonal from top-right -> bottom-left
			sumd1 += mat[i][start++];
			sumd2 += mat[i][col--];
		}
		// if the two diagonal sums are unequal then it is not a magic square
		if (sumd1 != sumd2)
			return false;

		// calculating sums of Rows and columns and checking if they are equal to each
		// other,
		// as well as equal to diagonal sum or not
		for (int i = startRow; i <= endRow; i++) {
			int rowSum = 0, colSum = 0;
			for (int j = startCol; j <= endColumn && i <= endRow; j++) {
				rowSum += mat[i][j];
				colSum += mat[i++][startCol];
			}
			if (rowSum != colSum || colSum != sumd1)
				return false;
		}
		return true;
	}

}
