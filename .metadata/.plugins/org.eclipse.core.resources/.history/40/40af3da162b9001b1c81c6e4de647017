/**
 * 
 */
package leetcode.string.problems;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;

/**
 * @author Hardik
 *
 *         Date : 06-May-2021 Time : 1:05:13 pm
 */
public class LongestSubstringWithoutRepeatingCharacters {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String str = sc.next();

		int length = lengthOfLongestSubstring(str);
		int length1 = lengthOfLongestSubstringII(str);
		System.out.println(length);
		System.out.println(length);

		sc.close();
	}

	/**
	 * @param str
	 * @return
	 */
	private static int lengthOfLongestSubstringII(String s) {
		if (s == null || s.length() == 0)
			return 0;

		HashSet<Character> set = new HashSet<Character>();
		int start = 0;
		int i = 0;
		int max = Integer.MIN_VALUE;
		String ans = "";
		while (i < s.length()) {
			while (set.size() > 0 && set.contains(s.charAt(i))) {
				set.remove(s.charAt(i));
				start++;
			}
			set.add(s.charAt(i));
			max = Math.max(max, i - start);
			i++;
		}
		max = Math.max(max, i - start);
		return max;

	}

	/**
	 * @param str
	 * @return
	 */
	private static int lengthOfLongestSubstring(String s) {
		if (s == null || s.length() == 0) {
			return 0;
		}

		HashMap<Character, Integer> map = new HashMap<>();
		// map.put(s.charAt(0), 1);
		int count = 1;
		int max = count;
		for (int i = 0; i < s.length() - 1; i++) {
			if (s.charAt(i) != s.charAt(i + 1)) {
				if (map.containsKey(s.charAt(i + 1))) {
					map.clear();
					count = 1;
				}
				count++;
				max = Math.max(max, count);
				map.put(s.charAt(i), 1);
			} else {
				count = 1;
				map.clear();
			}

		}
		return max;
	}

}
